import asyncio
import json
import os
import re
from functools import wraps
from aiogram import Bot, Dispatcher, types, executor  # ƒê√£ s·ª≠a import executor ·ªü ƒë√¢y
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from keep_alive import keep_alive
keep_alive()

# !!! QUAN TR·ªåNG: H√£y thay th·∫ø TOKEN v√† ADMIN_USERNAME b·∫±ng th√¥ng tin th·ª±c t·∫ø c·ªßa b·∫°n !!!
TOKEN = "8076967422:AAFfQfggn_PdDQx5uBtUnAZO-PlsNo9eNnI" # ƒê√ÇY L√Ä TOKEN V√ç D·ª§, H√ÉY THAY TH·∫æ
ADMIN_USERNAME = "truongdong1920" # Thay th·∫ø b·∫±ng username admin c·ªßa b·∫°n
XU_COST = 1

HISTORY_FILE = "lich_su.json"
ADMINS_FILE = "admins.json"
USER_XU_FILE = "user_xu.json"

# Initialize data structures
history = {}
admins = []
user_xu = {}

# --- Data Loading and Saving Functions ---
def load_history():
    if os.path.exists(HISTORY_FILE):
        try:
            with open(HISTORY_FILE, "r", encoding="utf-8") as f:
                loaded_history = json.load(f)
                if isinstance(loaded_history, dict):
                    return loaded_history
                print(f"Warning: {HISTORY_FILE} content is not a dictionary. Starting with empty history.")
        except json.JSONDecodeError:
            print(f"Warning: Could not decode {HISTORY_FILE}. Starting with empty history.")
        except Exception as e:
            print(f"Warning: Error loading {HISTORY_FILE}: {e}. Starting with empty history.")
    return {}

def save_history():
    try:
        with open(HISTORY_FILE, "w", encoding="utf-8") as f:
            json.dump(history, f, indent=2, ensure_ascii=False)
    except Exception as e:
        print(f"Error saving history: {e}")

def load_admins():
    if os.path.exists(ADMINS_FILE):
        try:
            with open(ADMINS_FILE, "r", encoding="utf-8") as f:
                loaded_admins = json.load(f)
                if isinstance(loaded_admins, list) and all(isinstance(item, int) for item in loaded_admins):
                    return loaded_admins
                print(f"Warning: {ADMINS_FILE} content is not a list of integers. Reverting to default.")
        except json.JSONDecodeError:
            print(f"Warning: Could not decode {ADMINS_FILE}. Reverting to default.")
        except Exception as e:
            print(f"Warning: Error loading {ADMINS_FILE}: {e}. Reverting to default.")
    
    default_admins = [6381480476]  # Default admin ID
    try:
        with open(ADMINS_FILE, "w", encoding="utf-8") as f:
            json.dump(default_admins, f, indent=2)
    except Exception as e:
        print(f"Error creating default admins file: {e}")
    return default_admins

def save_admins(admin_list):
    try:
        with open(ADMINS_FILE, "w", encoding="utf-8") as f:
            json.dump(admin_list, f, indent=2)
    except Exception as e:
        print(f"Error saving admins: {e}")

def load_user_xu():
    if os.path.exists(USER_XU_FILE):
        try:
            with open(USER_XU_FILE, "r", encoding="utf-8") as f:
                loaded_xu = json.load(f)
                if isinstance(loaded_xu, dict) and all(isinstance(k, str) and isinstance(v, (int, float)) for k, v in loaded_xu.items()):
                    return loaded_xu
                print(f"Warning: {USER_XU_FILE} content is not in the expected format. Starting with empty user_xu.")
        except json.JSONDecodeError:
            print(f"Warning: Could not decode {USER_XU_FILE}. Starting with empty user_xu.")
        except Exception as e:
            print(f"Warning: Error loading {USER_XU_FILE}: {e}. Starting with empty user_xu.")
    return {}

def save_user_xu():
    try:
        with open(USER_XU_FILE, "w", encoding="utf-8") as f:
            json.dump(user_xu, f, indent=2)
    except Exception as e:
        print(f"Error saving user_xu: {e}")

# Load initial data
history = load_history()
admins = load_admins()
user_xu = load_user_xu()

# Admin decorator
def admin_only(handler):
    @wraps(handler)
    async def wrapper(message: types.Message, *args, **kwargs):
        if message.from_user.id not in admins:
            await message.reply("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
            return
        return await handler(message, *args, **kwargs)
    return wrapper

# Keyboard generator
def get_user_keyboard(user_id):
    if user_id in admins:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="G·ª≠i MD5 ƒë·ªÉ ph√¢n t√≠ch"), KeyboardButton(text="B·∫£ng gi√° xu")],
                [KeyboardButton(text="C·∫•p xu"), KeyboardButton(text="Th√™m admin"), KeyboardButton(text="X√≥a admin")],
                [KeyboardButton(text="G·ª≠i th√¥ng b√°o"), KeyboardButton(text="Danh s√°ch ng∆∞·ªùi d√πng")], # Th√™m n√∫t G·ª≠i th√¥ng b√°o
                [KeyboardButton(text="Li√™n h·ªá admin")]
            ],
            resize_keyboard=True
        )
    else:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="G·ª≠i MD5 ƒë·ªÉ ph√¢n t√≠ch"), KeyboardButton(text="B·∫£ng gi√° xu")],
                [KeyboardButton(text="Li√™n h·ªá admin")],
            ],
            resize_keyboard=True
        )

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

def analyze_md5(md5_hash):
    md5_hash = md5_hash.lower()
    if md5_hash in history:
        cached_data = history[md5_hash]
        # Expecting history to store [result, ratio_tai, ratio_xiu]
        if isinstance(cached_data, list) and len(cached_data) == 3:
            try:
                return cached_data[0], float(cached_data[1]), float(cached_data[2])
            except ValueError:
                # Invalid data in cache, proceed to recalculate
                pass

    digit_values = [int(char, 16) for char in md5_hash if char.isdigit()]
    letter_values = [ord(char) for char in md5_hash if char.isalpha()]

    if not digit_values or not letter_values:
        result, ratio_tai, ratio_xiu = "X·ªâu", 0.0, 100.0
        history[md5_hash] = [result, ratio_tai, ratio_xiu]
        save_history()
        return result, ratio_tai, ratio_xiu

    digit_sum = sum(digit_values)
    letter_sum = sum(letter_values)

    xor_digit = 0
    for num in digit_values:
        xor_digit ^= num

    xor_letter = 0
    for char_val in letter_values:
        xor_letter ^= char_val

    squared_digit_sum = sum(x**2 for x in digit_values) % 100
    squared_letter_sum = sum(x**2 for x in letter_values) % 100

    hex_blocks = [int(md5_hash[i:i+4], 16) for i in range(0, len(md5_hash), 4)]
    hex_weighted_sum = sum((i + 1) * hex_blocks[i % len(hex_blocks)] for i in range(len(hex_blocks))) % 100

    even_count = sum(1 for x in digit_values if x % 2 == 0)
    odd_count = sum(1 for x in digit_values if x % 2 != 0)

    final_score = (
        digit_sum * 2 + letter_sum +
        xor_digit * 3 + xor_letter +
        squared_digit_sum * 2 + squared_letter_sum +
        hex_weighted_sum +
        even_count * 5 - odd_count * 3
    ) % 100

    result = "T√†i" if final_score % 2 == 0 else "X·ªâu"
    ratio_tai = float(final_score)
    ratio_xiu = 100.0 - ratio_tai
    
    history[md5_hash] = [result, ratio_tai, ratio_xiu]
    save_history()
    return result, ratio_tai, ratio_xiu

# Command Handlers
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Kh√¥ng c√≥"
    current_xu = user_xu.get(str(user_id), 0)
    
    # Add user to user_xu if not exists, for /broadcast and user list purposes
    if str(user_id) not in user_xu:
        user_xu[str(user_id)] = 0
        save_user_xu()

    welcome_msg = (
        "‚ú® CH√ÄO M·ª™NG ƒê·∫æN V·ªöI TOOL PH√ÇN T√çCH MD5 ‚ú®\n\n"
        f"üë§ T√†i kho·∫£n: @{username}\n"
        f"üÜî ID: {user_id}\n"
        f"üí∞ Xu hi·ªán c√≥: {current_xu}\n\n"
        "Ch·ªçn ch·ª©c nƒÉng b√™n d∆∞·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu tr·∫£i nghi·ªám nh√©!"
    )
    
    await message.reply(welcome_msg, reply_markup=get_user_keyboard(user_id))

@dp.message_handler(lambda message: message.text == "Tho√°t")
async def exit_handler(message: types.Message):
    await message.reply("üëã H·∫πn g·∫∑p l·∫°i b·∫°n l·∫ßn sau!", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(lambda message: message.text == "G·ª≠i MD5 ƒë·ªÉ ph√¢n t√≠ch")
async def prompt_md5_handler(message: types.Message):
    await message.reply("Vui l√≤ng g·ª≠i m√£ MD5 (32 k√Ω t·ª±) ƒë·ªÉ t√¥i ph√¢n t√≠ch.")

@dp.message_handler(lambda message: message.text == "B·∫£ng gi√° xu")
async def show_xu_price_table(message: types.Message):
    xu_table = (
        "üí∞ *B·∫£ng Gi√° Xu*\n\n"
        "1 Xu = 1,000 VNƒê\n"
        "10 Xu = 9,500 VNƒê (-5% gi·∫£m gi√°)\n"
        "50 Xu = 45,000 VNƒê (-10% gi·∫£m gi√°)\n"
        "100 Xu = 85,000 VNƒê (-15% gi·∫£m gi√°)\n\n"
        "Li√™n h·ªá admin ƒë·ªÉ mua s·ªë l∆∞·ª£ng l·ªõn v·ªõi gi√° t·ªët h∆°n!"
    )
    await message.reply(xu_table, parse_mode="Markdown", reply_markup=get_user_keyboard(message.from_user.id))

@dp.message_handler(lambda message: message.text == "C·∫•p xu")
@admin_only
async def cap_xu_handler(message: types.Message):
    await message.reply(
        "Nh·∫≠p theo ƒë·ªãnh d·∫°ng: `ID_XU`\nV√≠ d·ª•: `123456789_100` (c·∫•p 100 Xu cho user ID 123456789)",
        parse_mode="Markdown",
        reply_markup=get_user_keyboard(message.from_user.id)
    )

# This handler processes replies to "C·∫•p xu" prompt
@dp.message_handler(lambda message: message.reply_to_message and 
                                      message.reply_to_message.text and 
                                      message.reply_to_message.text.startswith("Nh·∫≠p theo ƒë·ªãnh d·∫°ng: `ID_XU`") and
                                      re.fullmatch(r"\d+_\d+", message.text or ""),
                   content_types=types.ContentType.TEXT)
@admin_only
async def cap_xu_process(message: types.Message):
    try:
        user_id_str, xu_str = message.text.split("_")
        target_user_id = int(user_id_str)
        xu_cung_cap = int(xu_str)

        current_xu = user_xu.get(str(target_user_id), 0)
        user_xu[str(target_user_id)] = current_xu + xu_cung_cap
        save_user_xu()
        
        await message.reply(
            f"‚úÖ ƒê√£ c·∫•p {xu_cung_cap} xu cho user ID {target_user_id}. S·ªë d∆∞ m·ªõi: {user_xu[str(target_user_id)]}",
            reply_markup=get_user_keyboard(message.from_user.id)
        )
    except Exception as e:
        await message.reply(f"‚ùå L·ªói: {str(e)}")

@dp.message_handler(lambda message: message.text == "Th√™m admin")
@admin_only
async def add_admin_handler(message: types.Message):
    await message.reply(
        "Nh·∫≠p ID ng∆∞·ªùi d√πng mu·ªën th√™m l√†m Admin:",
        reply_markup=get_user_keyboard(message.from_user.id)
    )

@dp.message_handler(lambda message: message.text == "X√≥a admin")
@admin_only
async def remove_admin_handler(message: types.Message):
    await message.reply(
        "Nh·∫≠p ID ng∆∞·ªùi d√πng mu·ªën x√≥a kh·ªèi Admin:",
        reply_markup=get_user_keyboard(message.from_user.id)
    )

# This handler processes replies for adding/removing admins
@dp.message_handler(lambda message: message.text and message.text.isdigit() and message.reply_to_message and 
                   message.reply_to_message.text and
                   (message.reply_to_message.text.startswith("Nh·∫≠p ID ng∆∞·ªùi d√πng mu·ªën th√™m l√†m Admin:") or 
                    message.reply_to_message.text.startswith("Nh·∫≠p ID ng∆∞·ªùi d√πng mu·ªën x√≥a kh·ªèi Admin:"))
                   ,content_types=types.ContentType.TEXT)
@admin_only
async def admin_management_handler(message: types.Message):
    try:
        admin_id_to_manage = int(message.text)
        action_prompt = message.reply_to_message.text

        if action_prompt.startswith("Nh·∫≠p ID ng∆∞·ªùi d√πng mu·ªën th√™m"):
            if admin_id_to_manage in admins:
                await message.reply(f"‚ö†Ô∏è ID {admin_id_to_manage} ƒë√£ l√† admin r·ªìi.", reply_markup=get_user_keyboard(message.from_user.id))
            else:
                admins.append(admin_id_to_manage)
                save_admins(admins)
                await message.reply(f"‚úÖ ƒê√£ th√™m ID {admin_id_to_manage} v√†o danh s√°ch admin.", reply_markup=get_user_keyboard(message.from_user.id))
        elif action_prompt.startswith("Nh·∫≠p ID ng∆∞·ªùi d√πng mu·ªën x√≥a"):
            if admin_id_to_manage not in admins:
                await message.reply(f"‚ö†Ô∏è ID {admin_id_to_manage} kh√¥ng ph·∫£i admin.", reply_markup=get_user_keyboard(message.from_user.id))
            elif admin_id_to_manage == 6906617636:  # Default admin ID, can be made more dynamic if needed
                await message.reply("‚ùå Kh√¥ng th·ªÉ x√≥a admin m·∫∑c ƒë·ªãnh n√†y.", reply_markup=get_user_keyboard(message.from_user.id))
            else:
                admins.remove(admin_id_to_manage)
                save_admins(admins)
                await message.reply(f"‚úÖ ƒê√£ x√≥a ID {admin_id_to_manage} kh·ªèi danh s√°ch admin.", reply_markup=get_user_keyboard(message.from_user.id))
    except ValueError:
        await message.reply("ID kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p m·ªôt s·ªë.", reply_markup=get_user_keyboard(message.from_user.id))
    except Exception as e:
        await message.reply(f"ƒê√£ x·∫£y ra l·ªói: {e}", reply_markup=get_user_keyboard(message.from_user.id))


@dp.message_handler(lambda message: message.text == "Li√™n h·ªá admin")
async def contact_admin_handler(message: types.Message):
    await message.reply(
        f"üëâ Li√™n h·ªá admin: https://t.me/{ADMIN_USERNAME}",
        reply_markup=get_user_keyboard(message.from_user.id)
    )

@dp.message_handler(lambda message: message.text == "G·ª≠i th√¥ng b√°o")
@admin_only
async def broadcast_prompt(message: types.Message):
    await message.reply(
        "Nh·∫≠p n·ªôi dung th√¥ng b√°o b·∫°n mu·ªën g·ª≠i ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng (tr·∫£ l·ªùi tin nh·∫Øn n√†y):",
        # reply_markup=ReplyKeyboardRemove() # Gi·ªØ l·∫°i keyboard ƒë·ªÉ admin d·ªÖ thao t√°c
        reply_markup=get_user_keyboard(message.from_user.id)
    )

# Handles both command /broadcast and reply to prompt
@dp.message_handler(
    lambda message: message.reply_to_message and
                   message.reply_to_message.from_user.is_bot and # Check if replying to bot
                   message.reply_to_message.text and
                   message.reply_to_message.text.startswith("Nh·∫≠p n·ªôi dung th√¥ng b√°o b·∫°n mu·ªën g·ª≠i"),
    content_types=types.ContentType.TEXT
)
@dp.message_handler(commands=["broadcast"])
@admin_only
async def broadcast_message_handler(message: types.Message):
    content = ""
    if message.get_command() == "/broadcast":
        content = message.get_args()
    elif message.reply_to_message: # Must be a reply to the prompt
        content = message.text

    if not content:
        await message.reply(
            "Vui l√≤ng nh·∫≠p n·ªôi dung th√¥ng b√°o.\n"
            "C√°ch 1: D√πng l·ªánh `/broadcast N·ªôi dung tin nh·∫Øn`\n"
            "C√°ch 2: B·∫•m n√∫t 'G·ª≠i th√¥ng b√°o' v√† tr·∫£ l·ªùi tin nh·∫Øn c·ªßa bot v·ªõi n·ªôi dung.",
            parse_mode="Markdown",
            reply_markup=get_user_keyboard(message.from_user.id)
        )
        return

    success = 0
    failed = 0
    
    all_user_ids = list(user_xu.keys()) # Create a list to iterate over, as user_xu might change if new users interact
    
    for user_id_str in all_user_ids:
        try:
            await bot.send_message(int(user_id_str), f"üì¢ Th√¥ng b√°o t·ª´ Admin:\n\n{content}")
            success += 1
            await asyncio.sleep(0.1)  # Tr√°nh rate limit (0.1s l√† kh√° nhanh, c√≥ th·ªÉ tƒÉng n·∫øu c·∫ßn)
        except Exception as e:
            failed += 1
            print(f"L·ªói g·ª≠i tin nh·∫Øn user {user_id_str}: {e}")
    
    await message.reply(
        f"‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn {success} ng∆∞·ªùi d√πng.\n‚ùå Kh√¥ng g·ª≠i ƒë∆∞·ª£c ƒë·∫øn {failed} ng∆∞·ªùi.",
        reply_markup=get_user_keyboard(message.from_user.id)
    )

@dp.message_handler(lambda message: message.text == "Danh s√°ch ng∆∞·ªùi d√πng")
@admin_only
async def user_list_handler(message: types.Message):
    if not user_xu:
        await message.reply("Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o s·ª≠ d·ª•ng bot.", reply_markup=get_user_keyboard(message.from_user.id))
        return
    
    user_list_parts = ["üìã Danh s√°ch ng∆∞·ªùi d√πng v√† s·ªë xu:\n"]
    for user_id, xu_count in user_xu.items():
        user_list_parts.append(f"‚Ä¢ ID: {user_id} - Xu: {xu_count}")
    
    full_user_list = "\n".join(user_list_parts)

    # Telegram has a message length limit (4096 chars)
    if len(full_user_list) > 4000:
        await message.reply("Danh s√°ch ng∆∞·ªùi d√πng qu√° d√†i ƒë·ªÉ hi·ªÉn th·ªã. C√¢n nh·∫Øc xu·∫•t ra file ho·∫∑c chia nh·ªè.", reply_markup=get_user_keyboard(message.from_user.id))
        # For very long lists, you might want to send it as a file
        # with open("user_list.txt", "w", encoding="utf-8") as f:
        #     f.write(full_user_list)
        # await message.reply_document(open("user_list.txt", "rb"))
        # os.remove("user_list.txt")
    else:
        await message.reply(
            full_user_list,
            reply_markup=get_user_keyboard(message.from_user.id)
        )

# This handler processes MD5 strings
@dp.message_handler(regexp=r"^[a-fA-F0-9]{32}$") # Allow uppercase hex
async def md5_analyze_handler(message: types.Message):
    md5_hash_input = message.text.lower() # Convert to lowercase for consistency
    user_id_str = str(message.from_user.id)
    
    if user_id_str not in user_xu: # Should be added by /start, but as a fallback
        user_xu[user_id_str] = 0
        # No save_user_xu() here, will be saved after deduction or if they top up
    
    if user_xu.get(user_id_str, 0) < XU_COST:
        await message.reply(
            f"‚ùå B·∫°n kh√¥ng ƒë·ªß {XU_COST} xu ƒë·ªÉ ph√¢n t√≠ch MD5.\n"
            f"S·ªë xu hi·ªán t·∫°i: {user_xu.get(user_id_str, 0)}.\n"
            "Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ mua th√™m xu.",
            reply_markup=get_user_keyboard(message.from_user.id)
        )
        return
    
    # Deduct xu before analysis
    user_xu[user_id_str] -= XU_COST
    save_user_xu()
    
    await message.reply("üîç ƒêang ph√¢n t√≠ch m√£ MD5, vui l√≤ng ch·ªù gi√¢y l√°t...", reply_markup=get_user_keyboard(message.from_user.id)) # Show keyboard immediately

    try:
        result, ratio_tai, ratio_xiu = analyze_md5(md5_hash_input)
        
        reply_text = (
            f"üé∞ *PH√ÇN T√çCH MD5 SI√äU CHU·∫®N* üîÆ‚ú®üååüé∞\n"
            f"üìå *MD5*: `{md5_hash_input}`\n"
            f"üí• *T√†i*: {ratio_tai:.2f}% [ {'üü•' * int(ratio_tai/10)}{'‚¨úÔ∏è' * (10 - int(ratio_tai/10))} ]\n"
            f"üí¶ *X·ªâu*: {ratio_xiu:.2f}% [ {'üü¶' * int(ratio_xiu/10)}{'‚¨úÔ∏è' * (10 - int(ratio_xiu/10))} ]\n"
            f"üí∞ *XU C√íN L·∫†I*: {user_xu[user_id_str]}"
        )
        
        await message.reply(
            reply_text,
            parse_mode="Markdown",
            reply_markup=get_user_keyboard(message.from_user.id)
        )
    except Exception as e:
        # Refund xu if analysis fails unexpectedly
        user_xu[user_id_str] += XU_COST
        save_user_xu()
        await message.reply(
            f"R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ph√¢n t√≠ch: {e}\nXu c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ho√†n l·∫°i.",
            reply_markup=get_user_keyboard(message.from_user.id)
        )
        print(f"Error during MD5 analysis for {md5_hash_input}: {e}")


# Fallback handler for text messages not caught by other handlers
@dp.message_handler(content_types=types.ContentType.TEXT)
async def unknown_text_handler(message: types.Message):
    # This can happen if admin replies to "C·∫•p xu" or "Th√™m admin" prompts with non-matching text
    if message.reply_to_message and message.reply_to_message.from_user.is_bot:
        if message.reply_to_message.text:
            if message.reply_to_message.text.startswith("Nh·∫≠p theo ƒë·ªãnh d·∫°ng: `ID_XU`") or \
               message.reply_to_message.text.startswith("Nh·∫≠p ID ng∆∞·ªùi d√πng mu·ªën th√™m l√†m Admin:") or \
               message.reply_to_message.text.startswith("Nh·∫≠p ID ng∆∞·ªùi d√πng mu·ªën x√≥a kh·ªèi Admin:"):
                await message.reply("ƒê·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i theo h∆∞·ªõng d·∫´n.", reply_markup=get_user_keyboard(message.from_user.id))
                return
    
    await message.reply(
        "L·ªánh kh√¥ng x√°c ƒë·ªãnh ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng ƒë√∫ng. Vui l√≤ng s·ª≠ d·ª•ng c√°c n√∫t tr√™n b√†n ph√≠m.",
        reply_markup=get_user_keyboard(message.from_user.id)
    )


if __name__ == "__main__":
    print("Bot ƒëang ch·∫°y...")
    executor.start_polling(dp, skip_updates=True) # skip_updates=True is good for development
