import asyncio # Added asyncio
import json
import os
from functools import wraps

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils import executor

# --- CONFIGURATION ---
TOKEN = "8076967422:AAFfQfggn_PdDQx5uBtUnAZO-PlsNo9eNnI"  # IMPORTANT: Replace with YOUR REAL BOT TOKEN
ADMIN_USERNAME = "Truongdong1920"
XU_COST = 1

HISTORY_FILE = "lich_su.json"
ADMINS_FILE = "admins.json"
USER_XU_FILE = "user_xu.json"

# --- Initialize data structures ---
history = {}
admins = []
user_xu = {}

# --- Data Loading and Saving ---
def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                print(f"Warning: Could not decode {HISTORY_FILE}. Starting with empty history.")
                return {}
    return {}

def save_history():
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(history, f, indent=2, ensure_ascii=False)

def load_admins():
    if os.path.exists(ADMINS_FILE):
        with open(ADMINS_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                print(f"Warning: Could not decode {ADMINS_FILE}. Initializing with default admin.")
    # Fallback to default if file is missing or corrupt
    default_admins = [6381480476]  # Default admin ID
    with open(ADMINS_FILE, "w", encoding="utf-8") as f:
        json.dump(default_admins, f, indent=2, ensure_ascii=False)
    return default_admins

def save_admins(admin_list):
    with open(ADMINS_FILE, "w", encoding="utf-8") as f:
        json.dump(admin_list, f, indent=2, ensure_ascii=False)

def load_user_xu():
    if os.path.exists(USER_XU_FILE):
        with open(USER_XU_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                print(f"Warning: Could not decode {USER_XU_FILE}. Starting with empty user xu data.")
                return {}
    return {}

def save_user_xu():
    with open(USER_XU_FILE, "w", encoding="utf-8") as f:
        json.dump(user_xu, f, indent=2, ensure_ascii=False)

# Load initial data
history = load_history()
admins = load_admins()
user_xu = load_user_xu()

# --- Admin Decorator ---
def admin_only(handler):
    @wraps(handler)
    async def wrapper(message: types.Message, *args, **kwargs):
        if message.from_user.id not in admins:
            await message.reply("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
            return
        return await handler(message, *args, **kwargs)
    return wrapper

# --- Keyboard Generator ---
def get_user_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="G·ª≠i MD5 ƒë·ªÉ ph√¢n t√≠ch"), KeyboardButton(text="B·∫£ng gi√° xu")],
            [KeyboardButton(text="Li√™n h·ªá admin")],
            [KeyboardButton(text="Tho√°t")] # Added Tho√°t to main keyboard for consistency
        ],
        resize_keyboard=True
    )

# --- Bot Initialization ---
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# --- MD5 Analysis Logic ---
def analyze_md5(md5_hash_str):
    md5_hash_str = md5_hash_str.lower() # Ensure consistency
    if md5_hash_str in history:
        entry = history[md5_hash_str]
        # Handle new format (dict) and potential old format (str)
        if isinstance(entry, dict) and 'result' in entry and 'ratio_tai' in entry and 'ratio_xiu' in entry:
            return entry['result'], entry['ratio_tai'], entry['ratio_xiu']
        elif isinstance(entry, str): # Old format: entry is "T√†i" or "X·ªâu"
            result = entry
            # For old format, return fixed ratios as per original logic
            if result == "T√†i":
                return result, 100.0, 0.0
            else:
                return result, 0.0, 100.0
        # If entry is in an unexpected format, recalculate
        print(f"MD5 {md5_hash_str} found in history with unexpected format. Recalculating.")


    digit_values = [int(char, 16) for char in md5_hash_str if char.isdigit()]
    letter_values = [ord(char) for char in md5_hash_str if char.isalpha()]

    if not digit_values or not letter_values:
        # Default to X·ªâu if either list is empty, and store this specific result
        result, ratio_tai, ratio_xiu = "X·ªâu", 0.0, 100.0
        history[md5_hash_str] = {"result": result, "ratio_tai": ratio_tai, "ratio_xiu": ratio_xiu}
        save_history()
        return result, ratio_tai, ratio_xiu

    digit_sum = sum(digit_values)
    letter_sum = sum(letter_values)

    xor_digit = 0
    for num in digit_values:
        xor_digit ^= num

    xor_letter = 0
    for char_val in letter_values: # Iterate over numeric ord values
        xor_letter ^= char_val

    squared_digit_sum = sum(x**2 for x in digit_values) % 100
    squared_letter_sum = sum(x**2 for x in letter_values) % 100

    hex_blocks = [int(md5_hash_str[i:i+4], 16) for i in range(0, len(md5_hash_str), 4)]
    hex_weighted_sum = sum((idx + 1) * hex_blocks[idx % len(hex_blocks)] for idx in range(len(hex_blocks))) % 100 # fixed i to idx

    even_count = sum(1 for x in digit_values if x % 2 == 0)
    odd_count = sum(1 for x in digit_values if x % 2 != 0)

    final_score = (
        digit_sum * 2 + letter_sum +
        xor_digit * 3 + xor_letter +
        squared_digit_sum * 2 + squared_letter_sum +
        hex_weighted_sum +
        even_count * 5 - odd_count * 3
    ) % 100

    result = "T√†i" if final_score % 2 == 0 else "X·ªâu"
    ratio_tai = float(final_score)
    ratio_xiu = 100.0 - float(final_score)

    # Store the new analysis result
    history[md5_hash_str] = {"result": result, "ratio_tai": ratio_tai, "ratio_xiu": ratio_xiu}
    save_history()

    return result, ratio_tai, ratio_xiu

# --- Command Handlers ---
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Kh√¥ng c√≥"
    # Ensure user is in xu system
    if str(user_id) not in user_xu:
        user_xu[str(user_id)] = 0 # Give 0 xu initially
        save_user_xu()
    current_xu = user_xu.get(str(user_id), 0)

    welcome_msg = (
        "‚ú® CH√ÄO M·ª™NG ƒê·∫æN V·ªöI TOOL PH√ÇN T√çCH MD5 ‚ú®\n\n"
        f"üë§ T√†i kho·∫£n: @{username}\n"
        f"üÜî ID: {user_id}\n"
        f"üí∞ Xu hi·ªán c√≥: {current_xu}\n\n"
        "Ch·ªçn ch·ª©c nƒÉng b√™n d∆∞·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu tr·∫£i nghi·ªám nh√©!"
    )
    await message.reply(welcome_msg, reply_markup=get_user_keyboard())

@dp.message_handler(lambda message: message.text == "Tho√°t")
async def exit_handler(message: types.Message):
    await message.reply("üëã H·∫πn g·∫∑p l·∫°i b·∫°n l·∫ßn sau!", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(lambda message: message.text == "G·ª≠i MD5 ƒë·ªÉ ph√¢n t√≠ch")
async def prompt_md5_handler(message: types.Message):
    await message.reply("Vui l√≤ng g·ª≠i m√£ MD5 (32 k√Ω t·ª±) ƒë·ªÉ t√¥i ph√¢n t√≠ch.")

@dp.message_handler(lambda message: message.text == "B·∫£ng gi√° xu")
async def show_xu_price_table(message: types.Message):
    xu_table = (
        "üí∞ *B·∫£ng Gi√° Xu*\n\n"
        "1 Xu = 1,000 VNƒê\n"
        "10 Xu = 9,500 VNƒê (-5% gi·∫£m gi√°)\n"
        "50 Xu = 45,000 VNƒê (-10% gi·∫£m gi√°)\n"
        "100 Xu = 85,000 VNƒê (-15% gi·∫£m gi√°)\n\n"
        f"Li√™n h·ªá admin @{ADMIN_USERNAME} ƒë·ªÉ mua s·ªë l∆∞·ª£ng l·ªõn v·ªõi gi√° t·ªët h∆°n!"
    )
    await message.reply(xu_table, parse_mode="Markdown", reply_markup=get_user_keyboard())

@dp.message_handler(commands=['capxu'])
@admin_only
async def cap_xu_handler(message: types.Message):
    args = message.get_args()
    if not args:
        await message.reply(
            "Nh·∫≠p theo ƒë·ªãnh d·∫°ng: `/capxu USER_ID S·ªê_XU`\n"
            "V√≠ d·ª•: `/capxu 123456789 100` (c·∫•p 100 Xu cho user 123456789)",
            parse_mode="Markdown"
        )
        return

    try:
        parts = args.split()
        if len(parts) != 2:
            raise ValueError("Sai ƒë·ªãnh d·∫°ng. C·∫ßn USER_ID v√† S·ªê_XU.")

        user_id_to_cap = int(parts[0])
        xu_cung_cap = int(parts[1])

        if xu_cung_cap < 0:
            await message.reply("‚ùå S·ªë xu c·∫•p kh√¥ng th·ªÉ √¢m.")
            return

        current_xu = user_xu.get(str(user_id_to_cap), 0)
        user_xu[str(user_id_to_cap)] = current_xu + xu_cung_cap
        save_user_xu()

        await message.reply(
            f"‚úÖ ƒê√£ c·∫•p {xu_cung_cap} xu cho user ID {user_id_to_cap}.\n"
            f"üí∞ Xu m·ªõi c·ªßa user {user_id_to_cap}: {user_xu[str(user_id_to_cap)]}"
        )
    except ValueError as e:
        await message.reply(f"‚ùå L·ªói ƒë·ªãnh d·∫°ng: {e}\nƒê√∫ng ƒë·ªãnh d·∫°ng: /capxu USER_ID S·ªê_XU (c·∫£ hai ph·∫£i l√† s·ªë).")
    except Exception as e:
        await message.reply(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")


@dp.message_handler(commands=['addadmin'])
@admin_only
async def add_admin_handler(message: types.Message):
    args = message.get_args()
    if not args:
        await message.reply("Nh·∫≠p ID ng∆∞·ªùi d√πng mu·ªën th√™m l√†m Admin: /addadmin USER_ID")
        return

    try:
        admin_id = int(args)
        if admin_id in admins:
            await message.reply(f"‚ö†Ô∏è ID {admin_id} ƒë√£ l√† admin r·ªìi.")
        else:
            admins.append(admin_id)
            save_admins(admins)
            await message.reply(f"‚úÖ ƒê√£ th√™m ID {admin_id} v√†o danh s√°ch admin.")
    except ValueError:
        await message.reply("‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë nguy√™n.")

@dp.message_handler(commands=['deladmin'])
@admin_only
async def remove_admin_handler(message: types.Message):
    args = message.get_args()
    if not args:
        await message.reply("Nh·∫≠p ID ng∆∞·ªùi d√πng mu·ªën x√≥a kh·ªèi Admin: /deladmin USER_ID")
        return

    try:
        admin_id_to_remove = int(args)
        if admin_id_to_remove not in admins:
            await message.reply(f"‚ö†Ô∏è ID {admin_id_to_remove} kh√¥ng c√≥ trong danh s√°ch admin.")
        elif admin_id_to_remove == 6906617636 and message.from_user.id != 6906617636 : # Prevent removing default admin unless it's the default admin itself
             await message.reply("‚ùå Kh√¥ng th·ªÉ x√≥a admin m·∫∑c ƒë·ªãnh tr·ª´ khi b·∫°n l√† admin ƒë√≥.")
        elif len(admins) == 1 and admin_id_to_remove in admins:
            await message.reply("‚ùå Kh√¥ng th·ªÉ x√≥a admin cu·ªëi c√πng. Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt admin.")
        else:
            admins.remove(admin_id_to_remove)
            save_admins(admins)
            await message.reply(f"‚úÖ ƒê√£ x√≥a ID {admin_id_to_remove} kh·ªèi danh s√°ch admin.")
    except ValueError:
        await message.reply("‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë nguy√™n.")


@dp.message_handler(lambda message: message.text == "Li√™n h·ªá admin")
async def contact_admin_handler(message: types.Message):
    await message.reply(
        f"üëâ Li√™n h·ªá admin: https://t.me/{ADMIN_USERNAME}",
        reply_markup=get_user_keyboard()
    )

@dp.message_handler(commands=['broadcast'])
@admin_only
async def broadcast_message_handler(message: types.Message): # Renamed for clarity
    content = message.get_args()
    if not content:
        await message.reply("Vui l√≤ng nh·∫≠p n·ªôi dung th√¥ng b√°o ngay sau l·ªánh, vd: /broadcast Hello m·ªçi ng∆∞·ªùi!")
        return

    success_count = 0
    failed_count = 0
    
    # Create a copy of keys to iterate over, in case user_xu changes during broadcast (unlikely here)
    user_ids_to_message = list(user_xu.keys())

    for user_id_str in user_ids_to_message:
        try:
            await bot.send_message(int(user_id_str), f"üì¢ Th√¥ng b√°o t·ª´ Admin:\n\n{content}")
            success_count += 1
            await asyncio.sleep(0.1)  # To avoid hitting Telegram rate limits
        except Exception as e:
            failed_count += 1
            print(f"L·ªói g·ª≠i tin nh·∫Øn ƒë·∫øn user {user_id_str}: {e}")
    
    await message.reply(
        f"üì£ Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i.\n"
        f"‚úÖ Th√†nh c√¥ng: {success_count} ng∆∞·ªùi d√πng.\n"
        f"‚ùå Th·∫•t b·∫°i: {failed_count} ng∆∞·ªùi d√πng."
    )

@dp.message_handler(commands=['users'])
@admin_only
async def user_list_handler(message: types.Message):
    if not user_xu:
        await message.reply("Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o trong h·ªá th·ªëng.")
        return
    
    user_list_msg = "üìã Danh s√°ch ng∆∞·ªùi d√πng v√† s·ªë xu:\n\n"
    for user_id, xu_amount in user_xu.items():
        user_list_msg += f"‚Ä¢ ID: `{user_id}` - Xu: {xu_amount}\n"
    
    # Handle cases where the message might be too long for Telegram
    if len(user_list_msg) > 4096:
        await message.reply("Danh s√°ch ng∆∞·ªùi d√πng qu√° d√†i ƒë·ªÉ hi·ªÉn th·ªã. C√¢n nh·∫Øc xu·∫•t ra file ho·∫∑c chia nh·ªè.")
        # Optionally, you could send it as a file:
        # with open("user_list.txt", "w", encoding="utf-8") as f:
        #     f.write(user_list_msg)
        # await message.reply_document(open("user_list.txt", "rb"))
        # os.remove("user_list.txt")
    else:
        await message.reply(user_list_msg, parse_mode="Markdown")


@dp.message_handler(regexp=r"^[a-fA-F0-9]{32}$") # Allow uppercase hex characters too
async def md5_analyze_handler(message: types.Message):
    md5_hash = message.text.lower() # Convert to lowercase for consistent processing & history keys
    user_id_str = str(message.from_user.id)
    
    # Ensure user is in xu system, add if not (e.g., if they interact first time via MD5)
    if user_id_str not in user_xu:
        user_xu[user_id_str] = 0 # Or some initial amount if you give free xu
        save_user_xu()
            
    if user_xu.get(user_id_str, 0) < XU_COST:
        await message.reply(
            f"‚ùå B·∫°n kh√¥ng ƒë·ªß {XU_COST} xu ƒë·ªÉ ph√¢n t√≠ch MD5.\n"
            f"üí∞ Xu hi·ªán t·∫°i: {user_xu.get(user_id_str, 0)}.\n"
            f"Vui l√≤ng li√™n h·ªá admin @{ADMIN_USERNAME} ƒë·ªÉ mua th√™m xu.",
            reply_markup=get_user_keyboard()
        )
        return

    # Deduct xu BEFORE analysis
    user_xu[user_id_str] -= XU_COST
    save_user_xu()
    
    await message.reply("üîç ƒêang ph√¢n t√≠ch m√£ MD5, vui l√≤ng ch·ªù m·ªôt l√°t...")
    
    try:
        result, ratio_tai, ratio_xiu = analyze_md5(md5_hash)
        
        reply_text = (
            f"üé∞ *PH√ÇN T√çCH MD5 SI√äU CHU·∫®N* üîÆ‚ú®üååüé∞\n"
            f"üìå *MD5*: `{md5_hash}`\n"
            f"üí• *K·∫øt qu·∫£ d·ª± ƒëo√°n*: **{result}**\n"
            f"üìà *T·ª∑ l·ªá T√†i*: {ratio_tai:.2f}% {'üü•'*int(ratio_tai/10)}{'‚¨úÔ∏è'*int((100-ratio_tai)/10)}\n"
            f"üìâ *T·ª∑ l·ªá X·ªâu*: {ratio_xiu:.2f}% {'üü¶'*int(ratio_xiu/10)}{'‚¨úÔ∏è'*int((100-ratio_xiu)/10)}\n"
            f"üí∞ *Xu c√≤n l·∫°i*: {user_xu[user_id_str]}"
        )
        
        await message.reply(
            reply_text,
            parse_mode="Markdown",
            reply_markup=get_user_keyboard()
        )
    except Exception as e:
        # Refund xu if analysis fails unexpectedly
        user_xu[user_id_str] += XU_COST
        save_user_xu()
        await message.reply(
            f"‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ph√¢n t√≠ch: {e}\n"
            f"Xu c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ho√†n l·∫°i. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá admin n·∫øu s·ª± c·ªë ti·∫øp di·ªÖn.",
            reply_markup=get_user_keyboard()
        )
        print(f"Error during MD5 analysis for {md5_hash}: {e}")


# Fallback handler for any other text not caught by specific handlers
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_unknown_text(message: types.Message):
    # You can choose to ignore, or reply with a "command not understood" message
    await message.reply(
        "ü§î T√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng s·ª≠ d·ª•ng c√°c n√∫t b·∫•m b√™n d∆∞·ªõi ho·∫∑c g·ª≠i m√£ MD5 h·ª£p l·ªá.",
        reply_markup=get_user_keyboard()
    )


if __name__ == "__main__":
    print("Bot ƒëang ch·∫°y...")
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        print(f"Bot d·ª´ng do l·ªói: {e}")
